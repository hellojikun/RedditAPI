'use strict';

var fetch = require('isomorphic-fetch');

var REQUEST_POSTS = exports.REQUEST_POSTS = 'REQUEST_POSTS'; /**
                                                              * Created by jk on 17-7-25.
                                                              */
var RECEIVE_POSTS = exports.RECEIVE_POSTS = 'RECEIVE_POSTS';
var SELECT_SUBREDDIT = exports.SELECT_SUBREDDIT = 'SELECT_SUBREDDIT';
var INVALIDATE_SUBREDDIT = exports.INVALIDATE_SUBREDDIT = 'INVALIDATE_SUBREDDIT ';

function selectSubreddit(subreddit) {
    return {
        type: SELECT_SUBREDDIT,
        subreddit: subreddit
    };
}

exports.selectSubreddit = selectSubreddit;
function invalidateSubreddit(subreddit) {
    return {
        type: INVALIDATE_SUBREDDIT,
        subreddit: subreddit
    };
}

exports.invalidateSubreddit = invalidateSubreddit;
function requestPosts(subreddit) {
    return {
        type: REQUEST_POSTS,
        subreddit: subreddit
    };
}

function receivePosts(subreddit, json) {
    return {
        type: RECEIVE_POSTS,
        subreddit: subreddit,
        posts: json.data.children.map(function (child) {
            return child.data;
        }),
        receivedAt: Date.now()
    };
}

function fetchPosts(subreddit) {
    return function (dispatch) {
        dispatch(requestPosts(subreddit));
        return fetch('http://www.reddit.com/r/' + subreddit + '.json').then(function (response) {
            return response.json();
        }).then(function (json) {
            return dispatch(receivePosts(subreddit, json));
        });
    };
}

function shouldFetchPosts(state, subreddit) {
    var posts = state.postsBySubreddit[subreddit];
    if (!posts) {
        return true;
    } else if (posts.isFetching) {
        return false;
    } else {
        return posts.didInvalidate;
    }
}

function fetchPostsIfNeeded(subreddit) {
    return function (dispatch, getState) {
        if (shouldFetchPosts(getState(), subreddit)) {
            return dispatch(fetchPosts(subreddit));
        }
    };
}
exports.fetchPostsIfNeeded = fetchPostsIfNeeded;