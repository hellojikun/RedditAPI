'use strict';

var _react = require('react');

var React = _react;
var Component = _react.Component;
var PropTypes = _react.PropTypes;

var _reactRedux = require('react-redux');

var connect = _reactRedux.connect;

var _actions = require('../actions');

var selectSubreddit = _actions.selectSubreddit;
var fetchPostsIfNeeded = _actions.fetchPostsIfNeeded;
var invalidateSubreddit = _actions.invalidateSubreddit;

var Picker = require('../components/Picker');

var Posts = require('../components/Posts');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Created by jk on 17-7-25.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */


var AsyncApp = function (_Component) {
    _inherits(AsyncApp, _Component);

    function AsyncApp(props) {
        _classCallCheck(this, AsyncApp);

        var _this = _possibleConstructorReturn(this, _Component.call(this, props));

        _this.handleChange = _this.handleChange.bind(_this);
        _this.handleRefreshClick = _this.handleRefreshClick.bind(_this);
        return _this;
    }

    AsyncApp.prototype.componentDidMount = function componentDidMount() {
        var _props = this.props,
            dispatch = _props.dispatch,
            selectedSubreddit = _props.selectedSubreddit;

        dispatch(fetchPostsIfNeeded(selectedSubreddit));
    };

    AsyncApp.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
        if (nextProps.selectedSubreddit !== this.props.selectedSubreddit) {
            var dispatch = nextProps.dispatch,
                selectedSubreddit = nextProps.selectedSubreddit;

            dispatch(fetchPostsIfNeeded(selectedSubreddit));
        }
    };

    AsyncApp.prototype.handleChange = function handleChange(nextSubreddit) {
        this.props.dispatch(selectSubreddit(nextSubreddit));
    };

    AsyncApp.prototype.handleRefreshClick = function handleRefreshClick(e) {
        e.preventDefault();

        var _props2 = this.props,
            dispatch = _props2.dispatch,
            selectedSubreddit = _props2.selectedSubreddit;

        dispatch(invalidateSubreddit(selectedSubreddit));
        dispatch(fetchPostsIfNeeded(selectedSubreddit));
    };

    AsyncApp.prototype.render = function render() {
        var _props3 = this.props,
            selectedSubreddit = _props3.selectedSubreddit,
            posts = _props3.posts,
            isFetching = _props3.isFetching,
            lastUpdated = _props3.lastUpdated;

        return React.createElement(
            'div',
            null,
            React.createElement(Picker, { value: selectedSubreddit,
                onChange: this.handleChange,
                options: ['reactjs', 'frontend'] }),
            React.createElement(
                'p',
                null,
                lastUpdated && React.createElement(
                    'span',
                    null,
                    'Last updated at ',
                    new Date(lastUpdated).toLocaleTimeString(),
                    '.',
                    ' '
                ),
                !isFetching && React.createElement(
                    'a',
                    { href: '#',
                        onClick: this.handleRefreshClick },
                    'Refresh'
                )
            ),
            isFetching && posts.length === 0 && React.createElement(
                'h2',
                null,
                'Loading...'
            ),
            !isFetching && posts.length === 0 && React.createElement(
                'h2',
                null,
                'Empty.'
            ),
            posts.length > 0 && React.createElement(
                'div',
                { style: { opacity: isFetching ? 0.5 : 1 } },
                React.createElement(Posts, { posts: posts })
            )
        );
    };

    return AsyncApp;
}(Component);

AsyncApp.propTypes = {
    selectedSubreddit: PropTypes.string.isRequired,
    posts: PropTypes.array.isRequired,
    isFetching: PropTypes.bool.isRequired,
    lastUpdated: PropTypes.number,
    dispatch: PropTypes.func.isRequired
};

function mapStateToProps(state) {
    var selectedSubreddit = state.selectedSubreddit,
        postsBySubreddit = state.postsBySubreddit;

    var _ref = postsBySubreddit[selectedSubreddit] || {
        isFetching: true,
        items: []
    },
        isFetching = _ref.isFetching,
        lastUpdated = _ref.lastUpdated,
        posts = _ref.items;

    return {
        selectedSubreddit: selectedSubreddit,
        posts: posts,
        isFetching: isFetching,
        lastUpdated: lastUpdated
    };
}

module.exports = connect(mapStateToProps)(AsyncApp);